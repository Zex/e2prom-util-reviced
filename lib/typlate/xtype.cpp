/* Autogenerated file for xtype configuration
 * by running bin2ascii with xtype.ini file.
 * The xtype header should be updated by developer
 * once the xtype.ini configuration is updated.
 * --------------! DO NOT EDIT -----------------*/
#include <typlate/xtype.hpp>

const char* user_18000[12] = {"USERBLK_TEST_CONDITIONS", "1", "4", "UINT16", "1", "STRING", "1", "COUNT16", "1", "INT16", "UNLTD", 0};
const char* user_18001[14] = {"USERBLK_FRONTEND", "1", "5", "UINT16", "3", "INT16", "2", "UINT16", "2", "COUNT16", "1", "UINT8", "UNLTD", 0};
const char* user_18002[6] = {"USERBLK_DAC_SETUP", "1", "1", "INT16", "6", 0};
const char* user_18005[10] = {"USERBLK_FRONTEND", "1", "3", "UINT16", "1", "INT16", "3", "UINT32", "1", 0};
const char* user_18006[10] = {"USERBLK_FRONTEND", "1", "3", "UINT16", "1", "INT16", "3", "UINT32", "1", 0};
const char* user_18007[14] = {"USERBLK_FILTER_GAIN", "1", "5", "UINT32", "1", "INT32", "1", "UINT32", "2", "COUNT16", "1", "INT8", "UNLTD", 0};
const char* user_18008[8] = {"USERBLK_FRONTEND", "1", "2", "INT16", "1", "UINT16", "1", 0};
const char* user_18009[10] = {"USERBLK_OVR_DETECTOR", "1", "3", "INT16", "4", "COUNT16", "1", "INT16", "UNLTD", 0};
const char* user_18010[6] = {"USERBLK_TEST_CONVERTER", "1", "1", "INT16", "4", 0};
const char* user_18011[12] = {"USERBLK_GAINCONTROL", "1", "4", "UINT16", "1", "INT16", "2", "COUNT16", "1", "UINT16", "UNLTD", 0};
const char* user_18012[14] = {"USERBLK_IF_PREFILTER", "1", "5", "UINT32", "2", "UINT16", "1", "INT16", "5", "COUNT16", "1", "INT8", "UNLTD", 0};
const char* user_18013[14] = {"USERBLK_IF_PREFILTER_CAL", "1", "5", "UINT32", "2", "UINT16", "1", "INT16", "5", "COUNT16", "1", "INT8", "UNLTD", 0};
const char* user_18014[10] = {"USERBLK_SYNTH_CTRL_TABLE", "1", "3", "UINT16", "2", "COUNT16", "1", "UINT16", "UNLTD", 0};
const char* user_18016[14] = {"USERBLK_GAIN", "1", "5", "UINT16", "1", "INT16", "3", "UINT32", "2", "COUNT16", "1", "INT8", "UNLTD", 0};
const char* user_18018[10] = {"USERBLK_ETH_ADDR", "1", "3", "UINT32", "3", "COUNT16", "1", "UINT8", "UNLTD", 0};
const char* user_18030[8] = {"USERBLK_ETH_ADDR", "1", "2", "UINT8", "6", "STRING", "1", 0};
const char* user_18031[10] = {"USERBLK_SUB_TYPEPLATE", "1", "3", "STRING", "4", "UINT16", "1", "STRING", "2", 0};
const char* user_18048[10] = {"USERBLK_CAL_REF", "1", "3", "UINT32", "1", "INT16", "3", "UINT16", "1", 0};
const char* user_18049[16] = {"USERBLK_TESTSPECTRUM", "1", "6", "UINT16", "1", "INT16", "1", "INT32", "1", "UINT32", "2", "COUNT16", "1", "INT16", "UNLTD", 0};
const char* user_18060[14] = {"USERBLK_ATT", "1", "5", "UINT16", "1", "INT16", "3", "UINT32", "2", "COUNT16", "1", "INT8", "UNLTD", 0};
const char* user_18061[14] = {"USERBLK_HF_ANT", "1", "5", "UINT16", "1", "INT16", "3", "UINT32", "2", "COUNT16", "1", "INT8", "UNLTD", 0};
const char* user_18070[10] = {"USERBLK_FRONTEND", "1", "3", "UINT16", "1", "INT16", "3", "INT32", "1", 0};
const char* user_18080[12] = {"USERBLK_ANT_FACTOR", "1", "4", "UINT16", "2", "UINT32", "2", "COUNT16", "1", "INT16", "UNLTD", 0};
const char* user_18500[16] = {"USERBLK_MSU", "1", "6", "UINT32", "2", "UINT8", "2", "UINT16", "1", "UINT32", "1", "UINT16", "3", "STRING", "1", 0};
const char* user_18501[16] = {"USERBLK_TOB", "1", "6", "UINT32", "2", "UINT8", "2", "UINT16", "1", "UINT32", "1", "UINT16", "3", "STRING", "1", 0};
const char* user_18502[6] = {"USERBLK_TOBCAL", "1", "1", "UINT32", "3", 0};

void init_xtype(UserBlkTps& ubt)
{
	ubt[18000] = get_types(user_18000);
	ubt[18001] = get_types(user_18001);
	ubt[18002] = get_types(user_18002);
	ubt[18005] = get_types(user_18005);
	ubt[18006] = get_types(user_18006);
	ubt[18007] = get_types(user_18007);
	ubt[18008] = get_types(user_18008);
	ubt[18009] = get_types(user_18009);
	ubt[18010] = get_types(user_18010);
	ubt[18011] = get_types(user_18011);
	ubt[18012] = get_types(user_18012);
	ubt[18013] = get_types(user_18013);
	ubt[18014] = get_types(user_18014);
	ubt[18016] = get_types(user_18016);
	ubt[18018] = get_types(user_18018);
	ubt[18030] = get_types(user_18030);
	ubt[18031] = get_types(user_18031);
	ubt[18048] = get_types(user_18048);
	ubt[18049] = get_types(user_18049);
	ubt[18060] = get_types(user_18060);
	ubt[18061] = get_types(user_18061);
	ubt[18070] = get_types(user_18070);
	ubt[18080] = get_types(user_18080);
	ubt[18500] = get_types(user_18500);
	ubt[18501] = get_types(user_18501);
	ubt[18502] = get_types(user_18502);
}

